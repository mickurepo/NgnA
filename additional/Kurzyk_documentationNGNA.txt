// The Pair class. Has handle to [char sign] and [double value]
// eg. Pairs: { [+],[12] }, { [^],[5] }, { [/],[2] }, { [r],[3] } (r-root, 125r3=5)
public static class Pair { ... }

public static void main(String[] args) { ... }

// Cleaning white spaces from the string, replacing decimal separator: ',' with '.'
// If the string starts with positive number, "+" char is added at the beginning
// 2+2 -> +2+2
private static String prepareOperationString(String operationStr) { ... }

// Checking (looking for) the first character, unsuspected characters,
// doubled special characters (eg. 2**3), special character on the end (eg. 2+3-).
// Returning ture if correct, false if incorrect
private static boolean checkCorrectnessOfLine(String str) { ... }

// Building pairList<Pair> from the string.
// Must provided correct string (to check correctionness use checkCorrectnessOfLine(String str) function)
private static List<Pair> organizeOperationString(String operationStr) { ... }

// Doing selected operation in all Pairs of pairList.
// Choose, which kind of operation will be done here: [^],[+],[-],[*],[/],[r] (root) (125r3=5)
// +5*6+2/444^5 with '*' will give +30+2/444^5 and one pair removed (*6), +30 jupm to place of 'old' +5
// To do full operation use doFullOperation(List<Pair>) function
private static void operationSeries(List<Pair> pairList, char typeOfOperation) { ... }

// Doing full operation with the right operation's sequence
private static void doFullOperation(List<Pair> pairList) { ... }

// Checking if the string can be parsed to double
public static boolean isNumeric(String str) { ... }

// Developer's helper
public static void printPairs(List<Pair> pairList) { ... }

// Getting clean operationStr string built based on what is in List<Pair> pairList
private static String getOperationStringRebuilt(List<Pair> pairList) { ... }